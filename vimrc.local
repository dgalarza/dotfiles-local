let base16colorspace=256
let mapleader = ","

nnoremap <leader>w <C-w>v<C-w>l

" Disable wordwrap
set nowrap

set list  " Shows invisible characters
set listchars=tab:▸\ ,eol:¬

set t_Co=256
set background=dark
set colorcolumn=80
colorscheme nord

" navigate tabs
nmap <Leader>nt :tabnew<CR>
map <leader><tab> :tabn <CR>
map <leader>p<tab> :tabp <CR>

" Remap to use new leader key
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>ut :TestFile -u<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>us :TestNearest -u<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

let g:indentobject_meaningful_indentation = ['haml', 'sass', 'yaml', 'markdown']
let g:indentLine_fileType = ['yaml']

" Python configuration
au FileType python setl sw=4 et ts=8 sts=4

nnoremap <leader>r :source $MYVIMRC<cr>
nnoremap <leader>h :e %:h

" Replace ctrlp with FZF
nnoremap <C-P> :Files<CR>

set path+=app/javascript

let g:rails_projections = {
      \ "spec/javascript/*.spec.jsx": { "alternate": "app/javascript/{}.jsx" },
      \ "app/javascript/*.jsx": { "alternate": "spec/javascript/{}.spec.jsx" },
      \ "spec/javascript/*.spec.js": { "alternate": "app/javascript/{}.js" },
      \ "app/javascript/*.js": { "alternate": "spec/javascript/{}.spec.js" }
      \ }

augroup FiletypeGroup
  autocmd!
  au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END

autocmd! VimResized
autocmd VimResized * :wincmd =

nmap <silent> <leader>f <Plug>(coc-definition)
nmap <silent> <Leader>d <Plug>(coc-type-definition)

let test#javascript#jest#executable = 'yarn test'

autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-prettier',
  \ 'coc-eslint'
\ ]

nnoremap <silent> K :call <SID>show_documentation()<CR>

" Tab complete with COC
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

set updatetime=300

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <leader>do <Plug>(coc-codeaction)
